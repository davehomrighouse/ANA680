# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uwTqhu3uI7T9CJBERvH0nNTdStR2H_5M

# ***Import libraries***
"""

from flask import Flask, render_template, request
import pickle
import numpy as np

"""# ***Code to read in model, accept user input written in index.html, and predict using model***"""

app = Flask(__name__)

# Load your trained model
with open("lgr.pkl", "rb") as f:
    scaler, lgr = pickle.load(f)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/predict", methods=["POST"])
def predict():
    # Collect form inputs
    clump_thickness = int(request.form["clump_thickness"])
    uniformity_cell_size = int(request.form["uniformity_cell_size"])
    uniformity_cell_shape = int(request.form["uniformity_cell_shape"])
    marginal_adhesion = int(request.form["marginal_adhesion"])
    single_epithelial_cell_size = int(request.form["single_epithelial_cell_size"])
    bare_nuclei = int(request.form["bare_nuclei"])
    bland_chromatin = int(request.form["bland_chromatin"])
    normal_nucleoli = int(request.form["normal_nucleoli"])
    mitoses = int(request.form["mitoses"])

    # Arrange into model input format
    inputs = np.array([[clump_thickness, uniformity_cell_size, uniformity_cell_shape,
                        marginal_adhesion, single_epithelial_cell_size, bare_nuclei,
                        bland_chromatin, normal_nucleoli, mitoses]])

    # Must scale the inputs as the model was trained on scaled data
    scaled_inputs = scaler.transform(inputs)
    # Make prediction
    prediction = lgr.predict(scaled_inputs)

    return f"<h3>Prediction: {prediction[0]}</h3>"

if __name__ == "__main__":
    app.run(debug=True)