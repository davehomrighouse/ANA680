# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uwTqhu3uI7T9CJBERvH0nNTdStR2H_5M

# ***Import libraries***
"""

from flask import Flask, render_template, request
import pickle
import numpy as np

"""# ***Code to read in model, accept user input written in index.html, and predict using model***"""

app = Flask(__name__)

# Load model, scaler, and encoders
ann = pickle.load(open('ann.pkl', 'rb'))
scaler = pickle.load(open('scaler.pkl', 'rb'))
le_gender = pickle.load(open('le_gender.pkl', 'rb'))
le_parent = pickle.load(open('le_parent.pkl', 'rb'))
le_lunch = pickle.load(open('le_lunch.pkl', 'rb'))
le_tpc = pickle.load(open('le_tpc.pkl', 'rb'))

@app.route('/')
def home():
    return render_template('index.html',
                           gender='male',
                           parental_education='some high school',
                           lunch='standard',
                           test_preparation_course='none',
                           math_score='',
                           reading_score='',
                           writing_score='',
                           prediction_text=None)

@app.route('/predict', methods=['POST'])
def predict():
    prediction = None
# Get form values
    gender = request.form['gender']
    parental_education = request.form['parental_education']
    lunch = request.form['lunch']
    test_preparation_course = request.form['test_preparation_course']
    math_score = float(request.form['math_score'])
    reading_score = float(request.form['reading_score'])
    writing_score = float(request.form['writing_score'])

    # Encode categorical features
    gender_encoded = le_gender.transform([gender])[0]
    parent_encoded = le_parent.transform([parental_education])[0]

    # Combine features
    numeric_features = np.array([[math_score, reading_score, writing_score]])
    numeric_scaled = scaler.transform(numeric_features)  # Scale numeric features

    # Combine all features for prediction
    X = np.hstack(([gender_encoded, parent_encoded], numeric_scaled[0].tolist()))
    X = np.array([X])  # Shape (1, 5)

    # Predict
    prediction_encoded = ann.predict(X)[0]
    prediction_text = "Predicted race/ethnicity: " + str(prediction_encoded)

    # Render template with retained inputs
    return render_template('index.html',
                           gender=gender,
                           parental_education=parental_education,
                           lunch=lunch,
                           test_preparation_course=test_preparation_course,
                           math_score=math_score,
                           reading_score=reading_score,
                           writing_score=writing_score,
                           prediction_text=prediction_text)

if __name__ == '__main__':
    app.run(debug=True)